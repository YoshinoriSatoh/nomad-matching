{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Metadata": {},
    "Parameters": {
        "AppSyncApiName": {
            "Type": "String",
            "Description": "The name of the AppSync API",
            "Default": "AppSyncSimpleTransform"
        },
        "DynamoDBModelTableReadIOPS": {
            "Type": "Number",
            "Description": "The number of read IOPS the table should support.",
            "Default": 5
        },
        "DynamoDBModelTableWriteIOPS": {
            "Type": "Number",
            "Description": "The number of write IOPS the table should support.",
            "Default": 5
        },
        "DynamoDBBillingMode": {
          "Type": "String",
          "Description": "Configure @model types to create DynamoDB tables with PAY_PER_REQUEST or PROVISIONED billing modes.",
          "Default": "PROVISIONED",
          "AllowedValues": [
            "PAY_PER_REQUEST",
            "PROVISIONED"
          ]
        },
        "ElasticSearchAccessIAMRoleName": {
            "Type": "String",
            "Description": "The name of the IAM role assumed by AppSync for Elasticsearch.",
            "Default": "AppSyncElasticSearchAccess"
        },
        "ElasticSearchStreamingLambdaCodeS3Bucket": {
            "Type": "String",
            "Description": "S3 bucket containing the DynamoDB streaming lambda code."
        },
        "ElasticSearchStreamingLambdaCodeS3Key": {
            "Type": "String",
            "Description": "S3 key containing the DynamoDB streaming lambda code."
        },
        "ElasticSearchStreamingLambdaHandlerName": {
            "Type": "String",
            "Description": "The name of the lambda handler.",
            "Default": "python_streaming_function.lambda_handler"
        },
        "ElasticSearchStreamingLambdaRuntime": {
            "Type": "String",
            "Description": "The lambda runtime (https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime)",
            "Default": "python3.6"
        },
        "ElasticSearchStreamingFunctionName": {
            "Type": "String",
            "Description": "The name of the streaming lambda function.",
            "Default": "DdbToEsFn"
        },
        "ElasticSearchStreamingIAMRoleName": {
            "Type": "String",
            "Description": "The name of the streaming lambda function IAM role.",
            "Default": "SearchableLambdaIAMRole"
        },
        "ElasticSearchDebugStreamingLambda": {
            "Type": "Number",
            "Description": "Enable debug logs for the Dynamo -> ES streaming lambda.",
            "Default": 1,
            "AllowedValues": [
                0,
                1
            ]
        },
        "ElasticSearchInstanceCount": {
            "Type": "Number",
            "Description": "The number of instances to launch into the ElasticSearch domain.",
            "Default": 1
        },
        "ElasticSearchDomainName": {
            "Type": "String",
            "Description": "The name of the ElasticSearch domain.",
            "Default": "appsync-elasticsearch-domain",
            "AllowedPattern": "^[a-z][a-z0-9-]*$",
            "MinLength": 1,
            "MaxLength": 28
        },
        "ElasticSearchInstanceType": {
            "Type": "String",
            "Description": "The type of instance to launch into the ElasticSearch domain.",
            "Default": "t2.small.elasticsearch",
            "AllowedValues": [
                "t2.small.elasticsearch",
                "t2.medium.elasticsearch",
                "c4.large.elasticsearch",
                "c4.xlarge.elasticsearch",
                "c4.2xlarge.elasticsearch",
                "c4.4xlarge.elasticsearch",
                "c4.8xlarge.elasticsearch",
                "m3.medium.elasticsearch",
                "m3.large.elasticsearch",
                "m3.xlarge.elasticsearch",
                "m3.2xlarge.elasticsearch",
                "m4.large.elasticsearch",
                "m4.xlarge.elasticsearch",
                "m4.2xlarge.elasticsearch",
                "m4.4xlarge.elasticsearch",
                "m4.10xlarge.elasticsearch",
                "r3.large.elasticsearch",
                "r3.xlarge.elasticsearch",
                "r3.2xlarge.elasticsearch",
                "r3.4xlarge.elasticsearch",
                "r3.8xlarge.elasticsearch",
                "r4.large.elasticsearch",
                "r4.xlarge.elasticsearch",
                "r4.2xlarge.elasticsearch",
                "r4.4xlarge.elasticsearch",
                "r4.8xlarge.elasticsearch",
                "r4.16xlarge.elasticsearch",
                "i2.xlarge.elasticsearch",
                "i2.2xlarge.elasticsearch",
                "i3.large.elasticsearch",
                "i3.xlarge.elasticsearch",
                "i3.2xlarge.elasticsearch",
                "i3.4xlarge.elasticsearch",
                "i3.8xlarge.elasticsearch",
                "i3.16xlarge.elasticsearch"
            ]
        },
        "ElasticSearchEBSVolumeGB": {
            "Type": "Number",
            "Description": "The size in GB of the EBS volumes that contain our data.",
            "Default": 20
        },
        "AuthCognitoUserPoolId": {
            "Type": "String",
            "Description": "The id of an existing User Pool to connect. If this is changed, a user pool will not be created for you.",
            "Default": "NONE"
        },
        "AuthCognitoUserPoolName": {
            "Type": "String",
            "Description": "The name of the user pool.",
            "Default": "AppSyncUserPool"
        },
        "AuthCognitoUserPoolMobileClientName": {
            "Type": "String",
            "Description": "The name of the native user pool client.",
            "Default": "CognitoNativeClient"
        },
        "AuthCognitoUserPoolJSClientName": {
            "Type": "String",
            "Description": "The name of the web user pool client.",
            "Default": "CognitoJSClient"
        },
        "AuthCognitoUserPoolRefreshTokenValidity": {
            "Type": "Number",
            "Description": "The time limit, in days, after which the refresh token is no longer valid.",
            "Default": 30
        },
        "env": {
            "Type": "String",
            "Description": "The environment name. e.g. Dev, Test, or Production",
            "Default": "NONE"
        },
        "ResolverBucket": {
            "Type": "String",
            "Description": "The name of the bucket containing the resolver templates"
        },
        "ResolverRootKey": {
            "Type": "String",
            "Description": "The s3 key of the folder containing the resolver templates in format {Type}.{Field}.[response|request].{Timestamp}"
        },
        "DeploymentTimestamp": {
            "Type": "String",
            "Description": "The timestamp used to identify thie most recent version of the resolver templates in s3."
        },
        "schemaGraphql": {
            "Type": "String",
            "Description": "The S3 location for the Schema: schema.graphql"
        }
    },
    "Resources": {
        "GraphQLSchema": {
            "Type": "AWS::AppSync::GraphQLSchema",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "DefinitionS3Location": {
                    "Ref": "schemaGraphql"
                }
            }
        },
        "GraphQLAPI": {
            "Type": "AWS::AppSync::GraphQLApi",
            "Properties": {
                "Name": {
                    "Fn::If": [
                        "HasEnvironmentParameter",
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AppSyncApiName"
                                    },
                                    {
                                        "Ref": "env"
                                    }
                                ]
                            ]
                        },
                        {
                            "Ref": "AppSyncApiName"
                        }
                    ]
                },
                "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
                "UserPoolConfig": {
                    "UserPoolId": {
                        "Fn::If": [
                            "AuthShouldCreateUserPool",
                            {
                                "Ref": "AuthCognitoUserPool"
                            },
                            {
                                "Ref": "AuthCognitoUserPoolId"
                            }
                        ]
                    },
                    "AwsRegion": {
                        "Ref": "AWS::Region"
                    },
                    "DefaultAction": "ALLOW"
                }
            }
        },
        "GraphQLAPIKey": {
            "Type": "AWS::AppSync::ApiKey",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                }
            }
        },
        "UserProfileTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "TableName": {
                    "Fn::If": [
                        "HasEnvironmentParameter",
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    "UserProfile",
                                    {
                                        "Fn::GetAtt": [
                                            "GraphQLAPI",
                                            "ApiId"
                                        ]
                                    },
                                    {
                                        "Ref": "env"
                                    }
                                ]
                            ]
                        },
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    "UserProfile",
                                    {
                                        "Fn::GetAtt": [
                                            "GraphQLAPI",
                                            "ApiId"
                                        ]
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "KeySchema": [
                    {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    }
                ],
                "AttributeDefinitions": [
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": {
                        "Ref": "DynamoDBModelTableReadIOPS"
                    },
                    "WriteCapacityUnits": {
                        "Ref": "DynamoDBModelTableWriteIOPS"
                    }
                },
                "StreamSpecification": {
                    "StreamViewType": "NEW_AND_OLD_IMAGES"
                }
            }
        },
        "UserProfileIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::If": [
                        "HasEnvironmentParameter",
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    "UserProfileTable",
                                    "role",
                                    {
                                        "Fn::GetAtt": [
                                            "GraphQLAPI",
                                            "ApiId"
                                        ]
                                    },
                                    {
                                        "Ref": "env"
                                    }
                                ]
                            ]
                        },
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    "UserProfileTable",
                                    "role",
                                    {
                                        "Fn::GetAtt": [
                                            "GraphQLAPI",
                                            "ApiId"
                                        ]
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "appsync.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "DynamoDBAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:BatchWriteItem",
                                        "dynamodb:PutItem",
                                        "dynamodb:DeleteItem",
                                        "dynamodb:GetItem",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:UpdateItem"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "UserProfileTable",
                                                "Arn"
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "/",
                                                [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "UserProfileTable",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "*"
                                                ]
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "UserProfileDataSource": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "Name": "UserProfileTable",
                "Type": "AMAZON_DYNAMODB",
                "ServiceRoleArn": {
                    "Fn::GetAtt": [
                        "UserProfileIAMRole",
                        "Arn"
                    ]
                },
                "DynamoDBConfig": {
                    "AwsRegion": {
                        "Fn::Select": [
                            3,
                            {
                                "Fn::Split": [
                                    ":",
                                    {
                                        "Fn::GetAtt": [
                                            "UserProfileTable",
                                            "Arn"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "TableName": {
                        "Ref": "UserProfileTable"
                    }
                }
            },
            "DependsOn": [
                "UserProfileTable",
                "UserProfileIAMRole"
            ]
        },
        "GetUserProfileResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "UserProfileDataSource",
                        "Name"
                    ]
                },
                "FieldName": "getUserProfile",
                "TypeName": "Query",
                "RequestMappingTemplateS3Location": {
                    "Fn::Join": [
                        "",
                        [
                            "s3://",
                            {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Ref": "ResolverBucket"
                                        },
                                        {
                                            "Ref": "ResolverRootKey"
                                        },
                                        {
                                            "Fn::Join": [
                                                ".",
                                                [
                                                    "Query",
                                                    "getUserProfile",
                                                    "request",
                                                    {
                                                        "Ref": "DeploymentTimestamp"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                ]
                            }
                        ]
                    ]
                },
                "ResponseMappingTemplateS3Location": {
                    "Fn::Join": [
                        "",
                        [
                            "s3://",
                            {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Ref": "ResolverBucket"
                                        },
                                        {
                                            "Ref": "ResolverRootKey"
                                        },
                                        {
                                            "Fn::Join": [
                                                ".",
                                                [
                                                    "Query",
                                                    "getUserProfile",
                                                    "response",
                                                    {
                                                        "Ref": "DeploymentTimestamp"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                ]
                            }
                        ]
                    ]
                }
            },
            "DependsOn": "GraphQLSchema"
        },
        "ListUserProfileResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "UserProfileDataSource",
                        "Name"
                    ]
                },
                "FieldName": "listUserProfiles",
                "TypeName": "Query",
                "RequestMappingTemplateS3Location": {
                    "Fn::Join": [
                        "",
                        [
                            "s3://",
                            {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Ref": "ResolverBucket"
                                        },
                                        {
                                            "Ref": "ResolverRootKey"
                                        },
                                        {
                                            "Fn::Join": [
                                                ".",
                                                [
                                                    "Query",
                                                    "listUserProfiles",
                                                    "request",
                                                    {
                                                        "Ref": "DeploymentTimestamp"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                ]
                            }
                        ]
                    ]
                },
                "ResponseMappingTemplateS3Location": {
                    "Fn::Join": [
                        "",
                        [
                            "s3://",
                            {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Ref": "ResolverBucket"
                                        },
                                        {
                                            "Ref": "ResolverRootKey"
                                        },
                                        {
                                            "Fn::Join": [
                                                ".",
                                                [
                                                    "Query",
                                                    "listUserProfiles",
                                                    "response",
                                                    {
                                                        "Ref": "DeploymentTimestamp"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                ]
                            }
                        ]
                    ]
                }
            },
            "DependsOn": "GraphQLSchema"
        },
        "CreateUserProfileResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "UserProfileDataSource",
                        "Name"
                    ]
                },
                "FieldName": "createUserProfile",
                "TypeName": "Mutation",
                "RequestMappingTemplateS3Location": {
                    "Fn::Join": [
                        "",
                        [
                            "s3://",
                            {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Ref": "ResolverBucket"
                                        },
                                        {
                                            "Ref": "ResolverRootKey"
                                        },
                                        {
                                            "Fn::Join": [
                                                ".",
                                                [
                                                    "Mutation",
                                                    "createUserProfile",
                                                    "request",
                                                    {
                                                        "Ref": "DeploymentTimestamp"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                ]
                            }
                        ]
                    ]
                },
                "ResponseMappingTemplateS3Location": {
                    "Fn::Join": [
                        "",
                        [
                            "s3://",
                            {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Ref": "ResolverBucket"
                                        },
                                        {
                                            "Ref": "ResolverRootKey"
                                        },
                                        {
                                            "Fn::Join": [
                                                ".",
                                                [
                                                    "Mutation",
                                                    "createUserProfile",
                                                    "response",
                                                    {
                                                        "Ref": "DeploymentTimestamp"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                ]
                            }
                        ]
                    ]
                }
            },
            "DependsOn": "GraphQLSchema"
        },
        "UpdateUserProfileResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "UserProfileDataSource",
                        "Name"
                    ]
                },
                "FieldName": "updateUserProfile",
                "TypeName": "Mutation",
                "RequestMappingTemplateS3Location": {
                    "Fn::Join": [
                        "",
                        [
                            "s3://",
                            {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Ref": "ResolverBucket"
                                        },
                                        {
                                            "Ref": "ResolverRootKey"
                                        },
                                        {
                                            "Fn::Join": [
                                                ".",
                                                [
                                                    "Mutation",
                                                    "updateUserProfile",
                                                    "request",
                                                    {
                                                        "Ref": "DeploymentTimestamp"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                ]
                            }
                        ]
                    ]
                },
                "ResponseMappingTemplateS3Location": {
                    "Fn::Join": [
                        "",
                        [
                            "s3://",
                            {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Ref": "ResolverBucket"
                                        },
                                        {
                                            "Ref": "ResolverRootKey"
                                        },
                                        {
                                            "Fn::Join": [
                                                ".",
                                                [
                                                    "Mutation",
                                                    "updateUserProfile",
                                                    "response",
                                                    {
                                                        "Ref": "DeploymentTimestamp"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                ]
                            }
                        ]
                    ]
                }
            },
            "DependsOn": "GraphQLSchema"
        },
        "DeleteUserProfileResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "UserProfileDataSource",
                        "Name"
                    ]
                },
                "FieldName": "deleteUserProfile",
                "TypeName": "Mutation",
                "RequestMappingTemplateS3Location": {
                    "Fn::Join": [
                        "",
                        [
                            "s3://",
                            {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Ref": "ResolverBucket"
                                        },
                                        {
                                            "Ref": "ResolverRootKey"
                                        },
                                        {
                                            "Fn::Join": [
                                                ".",
                                                [
                                                    "Mutation",
                                                    "deleteUserProfile",
                                                    "request",
                                                    {
                                                        "Ref": "DeploymentTimestamp"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                ]
                            }
                        ]
                    ]
                },
                "ResponseMappingTemplateS3Location": {
                    "Fn::Join": [
                        "",
                        [
                            "s3://",
                            {
                                "Fn::Join": [
                                    "/",
                                    [
                                        {
                                            "Ref": "ResolverBucket"
                                        },
                                        {
                                            "Ref": "ResolverRootKey"
                                        },
                                        {
                                            "Fn::Join": [
                                                ".",
                                                [
                                                    "Mutation",
                                                    "deleteUserProfile",
                                                    "response",
                                                    {
                                                        "Ref": "DeploymentTimestamp"
                                                    }
                                                ]
                                            ]
                                        }
                                    ]
                                ]
                            }
                        ]
                    ]
                }
            },
            "DependsOn": "GraphQLSchema"
        },
        "ElasticSearchAccessIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::If": [
                        "HasEnvironmentParameter",
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ElasticSearchAccessIAMRoleName"
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "GraphQLAPI",
                                            "ApiId"
                                        ]
                                    },
                                    {
                                        "Ref": "env"
                                    }
                                ]
                            ]
                        },
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ElasticSearchAccessIAMRoleName"
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "GraphQLAPI",
                                            "ApiId"
                                        ]
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "appsync.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "ElasticSearchAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "es:ESHttpPost",
                                        "es:ESHttpDelete",
                                        "es:ESHttpHead",
                                        "es:ESHttpGet",
                                        "es:ESHttpPost",
                                        "es:ESHttpPut"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                {
                                                    "Fn::GetAtt": [
                                                        "ElasticSearchDomain",
                                                        "DomainArn"
                                                    ]
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ElasticSearchDataSource": {
            "Type": "AWS::AppSync::DataSource",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "Name": "ElasticSearchDomain",
                "Type": "AMAZON_ELASTICSEARCH",
                "ServiceRoleArn": {
                    "Fn::GetAtt": [
                        "ElasticSearchAccessIAMRole",
                        "Arn"
                    ]
                },
                "ElasticsearchConfig": {
                    "AwsRegion": {
                        "Fn::Select": [
                            3,
                            {
                                "Fn::Split": [
                                    ":",
                                    {
                                        "Fn::GetAtt": [
                                            "ElasticSearchDomain",
                                            "DomainArn"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    "Endpoint": {
                        "Fn::Join": [
                            "",
                            [
                                "https://",
                                {
                                    "Fn::GetAtt": [
                                        "ElasticSearchDomain",
                                        "DomainEndpoint"
                                    ]
                                }
                            ]
                        ]
                    }
                }
            },
            "DependsOn": "ElasticSearchDomain"
        },
        "ElasticSearchDomain": {
            "Type": "AWS::Elasticsearch::Domain",
            "Properties": {
                "DomainName": {
                    "Fn::If": [
                        "HasEnvironmentParameter",
                        {
                            "Ref": "AWS::NoValue"
                        },
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    "d",
                                    {
                                        "Fn::GetAtt": [
                                            "GraphQLAPI",
                                            "ApiId"
                                        ]
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "ElasticsearchVersion": "6.2",
                "ElasticsearchClusterConfig": {
                    "ZoneAwarenessEnabled": false,
                    "InstanceCount": {
                        "Ref": "ElasticSearchInstanceCount"
                    },
                    "InstanceType": {
                        "Ref": "ElasticSearchInstanceType"
                    }
                },
                "EBSOptions": {
                    "EBSEnabled": true,
                    "VolumeType": "gp2",
                    "VolumeSize": {
                        "Ref": "ElasticSearchEBSVolumeGB"
                    }
                }
            }
        },
        "ElasticSearchStreamingLambdaIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::If": [
                        "HasEnvironmentParameter",
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ElasticSearchStreamingIAMRoleName"
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "GraphQLAPI",
                                            "ApiId"
                                        ]
                                    },
                                    {
                                        "Ref": "env"
                                    }
                                ]
                            ]
                        },
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ElasticSearchStreamingIAMRoleName"
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "GraphQLAPI",
                                            "ApiId"
                                        ]
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "ElasticSearchAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "es:ESHttpPost",
                                        "es:ESHttpDelete",
                                        "es:ESHttpHead",
                                        "es:ESHttpGet",
                                        "es:ESHttpPost",
                                        "es:ESHttpPut"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                {
                                                    "Fn::GetAtt": [
                                                        "ElasticSearchDomain",
                                                        "DomainArn"
                                                    ]
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "DynamoDBStreamAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "dynamodb:DescribeStream",
                                        "dynamodb:GetRecords",
                                        "dynamodb:GetShardIterator",
                                        "dynamodb:ListStreams"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "CloudWatchLogsAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "ElasticSearchStreamingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "ElasticSearchStreamingLambdaCodeS3Bucket"
                    },
                    "S3Key": {
                        "Ref": "ElasticSearchStreamingLambdaCodeS3Key"
                    }
                },
                "FunctionName": {
                    "Fn::If": [
                        "HasEnvironmentParameter",
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ElasticSearchStreamingFunctionName"
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "GraphQLAPI",
                                            "ApiId"
                                        ]
                                    },
                                    {
                                        "Ref": "env"
                                    }
                                ]
                            ]
                        },
                        {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ElasticSearchStreamingFunctionName"
                                    },
                                    {
                                        "Fn::GetAtt": [
                                            "GraphQLAPI",
                                            "ApiId"
                                        ]
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "Handler": {
                    "Ref": "ElasticSearchStreamingLambdaHandlerName"
                },
                "Role": {
                    "Fn::GetAtt": [
                        "ElasticSearchStreamingLambdaIAMRole",
                        "Arn"
                    ]
                },
                "Runtime": {
                    "Ref": "ElasticSearchStreamingLambdaRuntime"
                },
                "Environment": {
                    "Variables": {
                        "ES_ENDPOINT": {
                            "Fn::Join": [
                                "",
                                [
                                    "https://",
                                    {
                                        "Fn::GetAtt": [
                                            "ElasticSearchDomain",
                                            "DomainEndpoint"
                                        ]
                                    }
                                ]
                            ]
                        },
                        "ES_REGION": {
                            "Fn::Select": [
                                3,
                                {
                                    "Fn::Split": [
                                        ":",
                                        {
                                            "Fn::GetAtt": [
                                                "ElasticSearchDomain",
                                                "DomainArn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "DEBUG": {
                            "Ref": "ElasticSearchDebugStreamingLambda"
                        }
                    }
                }
            },
            "DependsOn": [
                "ElasticSearchStreamingLambdaIAMRole",
                "ElasticSearchDomain"
            ]
        },
        "UserProfileLambdaMapping": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "Properties": {
                "BatchSize": 1,
                "Enabled": true,
                "EventSourceArn": {
                    "Fn::GetAtt": [
                        "UserProfileTable",
                        "StreamArn"
                    ]
                },
                "FunctionName": {
                    "Fn::GetAtt": [
                        "ElasticSearchStreamingLambdaFunction",
                        "Arn"
                    ]
                },
                "StartingPosition": "LATEST"
            },
            "DependsOn": [
                "UserProfileTable",
                "ElasticSearchStreamingLambdaFunction"
            ]
        },
        "SearchUserProfileResolver": {
            "Type": "AWS::AppSync::Resolver",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [
                        "GraphQLAPI",
                        "ApiId"
                    ]
                },
                "DataSourceName": {
                    "Fn::GetAtt": [
                        "ElasticSearchDataSource",
                        "Name"
                    ]
                },
                "FieldName": "searchUserProfiles",
                "TypeName": "Query",
                "RequestMappingTemplate": {
                    "Fn::Sub": [
                        "#set( $indexPath = \"/${DDBTableName}/doc/_search\" )\n{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"GET\",\n  \"path\": \"$indexPath.toLowerCase()\",\n  \"params\": {\n      \"body\": {\n          \"from\":       #if( $context.args.nextToken )\n$context.args.nextToken\n      #else\n0\n      #end,\n          \"size\":       #if( $context.args.limit )\n$context.args.limit\n      #else\n10\n      #end,\n          \"sort\":       #if( $context.args.sort )\n        [#if( !$util.isNullOrEmpty($context.args.sort.field) && !$util.isNullOrEmpty($context.args.sort.direction) )\n{\n      \"$context.args.sort.field\": {\n          \"order\": \"$context.args.sort.direction\"\n    }\n  }\n#end, \"_doc\"]\n      #else\n        []\n      #end,\n          \"query\":       #if( $context.args.filter )\n$util.transform.toElasticsearchQueryDSL($ctx.args.filter)\n      #else\n{\n                  \"match_all\": {}\n        }\n      #end\n    }\n  }\n}",
                        {
                            "DDBTableName": {
                                "Fn::If": [
                                    "HasEnvironmentParameter",
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                "UserProfile",
                                                {
                                                    "Fn::GetAtt": [
                                                        "GraphQLAPI",
                                                        "ApiId"
                                                    ]
                                                },
                                                {
                                                    "Ref": "env"
                                                }
                                            ]
                                        ]
                                    },
                                    {
                                        "Fn::Join": [
                                            "-",
                                            [
                                                "UserProfile",
                                                {
                                                    "Fn::GetAtt": [
                                                        "GraphQLAPI",
                                                        "ApiId"
                                                    ]
                                                }
                                            ]
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                },
                "ResponseMappingTemplate": "#set( $items = [] )\n#foreach( $entry in $context.result.hits.hits )\n  #if( !$foreach.hasNext )\n    #set( $nextToken = \"$entry.sort.get(0)\" )\n  #end\n  $util.qr($items.add($entry.get(\"_source\")))\n#end\n$util.toJson({\n  \"items\": $items,\n  \"total\": $ctx.result.hits.total,\n  \"nextToken\": $nextToken\n})"
            },
            "DependsOn": [
                "GraphQLSchema",
                "ElasticSearchDataSource"
            ]
        },
        "AuthCognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
                "UserPoolName": {
                    "Ref": "AuthCognitoUserPoolName"
                },
                "Policies": {
                    "PasswordPolicy": {
                        "MinimumLength": 8,
                        "RequireLowercase": true,
                        "RequireNumbers": true,
                        "RequireSymbols": true,
                        "RequireUppercase": true
                    }
                },
                "Schema": [
                    {
                        "Name": "email",
                        "Required": true,
                        "Mutable": true
                    }
                ],
                "AutoVerifiedAttributes": [
                    "email"
                ]
            },
            "Condition": "AuthShouldCreateUserPool"
        },
        "AuthCognitoUserPoolNativeClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
                "ClientName": {
                    "Ref": "AuthCognitoUserPoolMobileClientName"
                },
                "UserPoolId": {
                    "Fn::If": [
                        "AuthShouldCreateUserPool",
                        {
                            "Ref": "AuthCognitoUserPool"
                        },
                        {
                            "Ref": "AuthCognitoUserPoolId"
                        }
                    ]
                },
                "GenerateSecret": true,
                "RefreshTokenValidity": {
                    "Ref": "AuthCognitoUserPoolRefreshTokenValidity"
                },
                "ReadAttributes": [],
                "WriteAttributes": []
            },
            "Condition": "AuthShouldCreateUserPool"
        },
        "AuthCognitoUserPoolJSClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
                "ClientName": {
                    "Ref": "AuthCognitoUserPoolJSClientName"
                },
                "UserPoolId": {
                    "Fn::If": [
                        "AuthShouldCreateUserPool",
                        {
                            "Ref": "AuthCognitoUserPool"
                        },
                        {
                            "Ref": "AuthCognitoUserPoolId"
                        }
                    ]
                },
                "GenerateSecret": false,
                "RefreshTokenValidity": {
                    "Ref": "AuthCognitoUserPoolRefreshTokenValidity"
                },
                "ReadAttributes": [],
                "WriteAttributes": []
            },
            "Condition": "AuthShouldCreateUserPool"
        }
    },
    "Outputs": {
        "GraphQLAPIIdOutput": {
            "Description": "Your GraphQL API ID.",
            "Value": {
                "Fn::GetAtt": [
                    "GraphQLAPI",
                    "ApiId"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "GraphQLApiId"
                        ]
                    ]
                }
            }
        },
        "GraphQLAPIEndpointOutput": {
            "Description": "Your GraphQL API endpoint.",
            "Value": {
                "Fn::GetAtt": [
                    "GraphQLAPI",
                    "GraphQLUrl"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "GraphQLApiEndpoint"
                        ]
                    ]
                }
            }
        },
        "GraphQLAPIKeyOutput": {
            "Description": "Your GraphQL API key. Provide via 'x-api-key' header.",
            "Value": {
                "Fn::GetAtt": [
                    "GraphQLAPIKey",
                    "ApiKey"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "GraphQLApiKey"
                        ]
                    ]
                }
            }
        },
        "AuthCognitoUserPoolNativeClientId": {
            "Description": "Amazon Cognito UserPools native client ID",
            "Value": {
                "Fn::If": [
                    "AuthShouldCreateUserPool",
                    {
                        "Ref": "AuthCognitoUserPoolNativeClient"
                    },
                    {
                        "Fn::Join": [
                            " ",
                            [
                                "See UserPool:",
                                {
                                    "Ref": "AuthCognitoUserPoolId"
                                }
                            ]
                        ]
                    }
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "CognitoNativeClient"
                        ]
                    ]
                }
            }
        },
        "AuthCognitoUserPoolJSClientId": {
            "Description": "Amazon Cognito UserPools JS client ID",
            "Value": {
                "Fn::If": [
                    "AuthShouldCreateUserPool",
                    {
                        "Ref": "AuthCognitoUserPoolJSClient"
                    },
                    {
                        "Fn::Join": [
                            " ",
                            [
                                "See UserPool:",
                                {
                                    "Ref": "AuthCognitoUserPoolId"
                                }
                            ]
                        ]
                    }
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "CognitoJSClient"
                        ]
                    ]
                }
            }
        },
        "AuthCognitoUserPoolIdOutput": {
            "Description": "Amazon Cognito UserPool id",
            "Value": {
                "Fn::If": [
                    "AuthShouldCreateUserPool",
                    {
                        "Ref": "AuthCognitoUserPool"
                    },
                    {
                        "Ref": "AuthCognitoUserPoolId"
                    }
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "CognitoUserPoolId"
                        ]
                    ]
                }
            }
        }
    },
    "Conditions": {
        "HasEnvironmentParameter": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "env"
                        },
                        "NONE"
                    ]
                }
            ]
        },
        "AuthShouldCreateUserPool": {
            "Fn::Equals": [
                {
                    "Ref": "AuthCognitoUserPoolId"
                },
                "NONE"
            ]
        }
    }
}
